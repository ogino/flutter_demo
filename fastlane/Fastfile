# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

desc "Clean Flutter files."
lane :clean do
  sh("fvm", "flutter", "clean")
  sh("fvm", "flutter", "precache")
  sh("fvm", "flutter", "pub", "get")
end

platform :ios do
  api_key = nil

  before_all do
    api_key = app_store_connect_api_key(
      key_id: ENV["API_KEY_ID"],
      issuer_id: ENV["API_ISSUER_ID"],
      key_content: ENV["API_KEY_CONTENT"],
    )
  end

  desc "Prepare iOS build."
  private_lane :prepare do
    sh("fvm", "flutter", "build", "ios", "--no-codesign")
    if ENV["UPDATE_IDENTIFIER"] == "true"
      fastlane_dir = Dir.pwd
      Dir.chdir("..")
      root_dir = "#{Dir.pwd}/ios"
      Dir.chdir("#{fastlane_dir}")
      update_app_identifier(
        xcodeproj: "#{root_dir}/Runner.xcodeproj",
        plist_path: "#{root_dir}/Runner/Info.plist",
        app_identifier: ENV["APP_IDENTIFIER"],
      )
      copy_files(source: "#{fastlane_dir}/#{ENV["FIREBASE_IOS_CONF"]}", destination: "#{root_dir}/Runner/GoogleService-Info.plist")
    end
  end

  desc "Teardown iOS build."
  private_lane :teardown do
    if ENV["UPDATE_IDENTIFIER"] == "true"
      fastlane_dir = Dir.pwd
      Dir.chdir("..")
      root_dir = "#{Dir.pwd}/ios"
      Dir.chdir("#{fastlane_dir}")
      update_app_identifier(
        xcodeproj: "#{root_dir}/Runner.xcodeproj",
        plist_path: "#{root_dir}/Runner/Info.plist",
        app_identifier: "com.dmm.dev",
      )
      copy_files(source: "#{fastlane_dir}/firebase/default/GoogleService-Info.plist", destination: "#{root_dir}/Runner/GoogleService-Info.plist")
    end
  end

  desc "Build iOS project."
  private_lane :build do |options|
    match(type: options[:profile], readonly: true, git_branch: ENV["MATCH_BRANCH"], username: ENV["APPLE_ID"])
    update_code_signing_settings(
      use_automatic_signing: false,
      path: "./ios/Runner.xcodeproj",
      team_id: ENV["TEAM_ID"],
      bundle_identifier: ENV["APP_IDENTIFIER"],
      profile_name: ENV["sigh_#{ENV["APP_IDENTIFIER"]}_#{options[:profile]}_profile-name"],
    )
    fastlane_dir = Dir.pwd
    Dir.chdir("../ios")
    sh("bundle", "exec", "pod", "install")
    Dir.chdir("#{fastlane_dir}")
    gym(
      clean: true,
      configuration: options[:configuration],
      scheme: "Runner",
      workspace: "./ios/Runner.xcworkspace/",
      export_method: options[:export_method],
      export_team_id: ENV["TEAM_ID"],
      export_options: {
        provisioningProfiles: {
          ENV["APP_IDENTIFIER"] => ENV["sigh_#{ENV["APP_IDENTIFIER"]}_#{options[:profile]}_profile-path"],
        },
        signingStyle: "manual",
      },
      codesigning_identity: "#{ENV["TEAM_TYPE"]}: #{ENV["TEAM_NAME"]} (#{ENV["TEAM_ID"]})",
      output_directory: "build/app/outputs/ipa",
      output_name: "flutter-demo-#{options[:profile]}",
    )
  end

  desc "Build iOS project for AdHoc."
  private_lane :adhoc do
    prepare
    build(
      configuration: "Release",
      export_method: "ad-hoc",
      profile: "adhoc",
    )
    teardown
  end

  desc "Build iOS project for AdHoc."
  private_lane :store_build do
    prepare
    build(
      configuration: "Release",
      export_method: "app-store",
      profile: "appstore",
    )
    teardown
  end

  desc "[Only Administrator!] Fetch certificates and provisioning profiles."
  lane :certificates do
    match(type: "development", force_for_new_devices: true, git_branch: ENV["MATCH_BRANCH"], username: ENV["APPLE_ID"])
    match(type: "appstore", force_for_new_devices: true, git_branch: ENV["MATCH_BRANCH"], username: ENV["APPLE_ID"])
    match(type: "adhoc", force_for_new_devices: true, git_branch: ENV["MATCH_BRANCH"], username: ENV["APPLE_ID"])
    pem(force: true, app_identifier: ENV["APP_IDENTIFIER"], save_private_key: true, username: ENV["APPLE_ID"], development: true)
    pem(force: true, app_identifier: ENV["APP_IDENTIFIER"], save_private_key: true, username: ENV["APPLE_ID"], development: false)
  end

  desc "Ship iOS app to Firebase App Distribution."
  lane :firebase do
    clean
    adhoc
    firebase_app_distribution(
      app: ENV["FIREBASE_IOS_ID"],
      groups: ENV["TEST_GROUP"],
      debug: true,
      firebase_cli_token: ENV["FIREBASE_CLI_TOKEN"],
      release_notes: "AdHoc配信のアプリケーション(iOS版)になります。",
    )
  end

  desc "Ship iOS app to Testflight on AppStore Connect."
  lane :appstoreconnect do
    clean
    store_build
    upload_to_testflight(
      api_key: api_key, # Need appstore connect's API keys.
      skip_submission: false,
      skip_waiting_for_build_processing: false,
      verbose: true,
      changelog: "TestFlight配信のアプリケーション(iOS版)になります。",
    )
  end
end

platform :android do
  desc "Prepare Android build."
  private_lane :prepare do
    sh("fvm", "flutter", "build", "apk")
    fastlane_dir = Dir.pwd
    Dir.chdir("..")
    root_dir = "#{Dir.pwd}/android"
    Dir.chdir("#{fastlane_dir}")
    if ENV["UPDATE_IDENTIFIER"] == "true"
      android_change_package_identifier(
        newIdentifier: ENV["APP_IDENTIFIER"],
        manifest: "#{root_dir}/app/src/main/AndroidManifest.xml",
      )
      copy_files(source: "#{fastlane_dir}/#{ENV["FIREBASE_ANDROID_CONF"]}", destination: "#{root_dir}/app/google-services.json")
    end
    gradle(
      project_dir: root_dir,
      task: "clean",
    )
  end

  desc "Teardown Android build."
  private_lane :teardown do
    fastlane_dir = Dir.pwd
    Dir.chdir("..")
    root_dir = "#{Dir.pwd}/android"
    Dir.chdir("#{fastlane_dir}")
    if ENV["UPDATE_IDENTIFIER"] == "true"
      android_change_package_identifier(
        newIdentifier: "com.dmm.dev",
        manifest: "#{root_dir}/app/src/main/AndroidManifest.xml",
      )
      copy_files(source: "#{fastlane_dir}/firebase/default/google-services.json", destination: "#{root_dir}/app/google-services.json")
    end
    gradle(
      project_dir: root_dir,
      task: "clean",
    )
  end

  desc "Build Android project."
  private_lane :build do |options|
    fastlane_dir = Dir.pwd
    Dir.chdir("..")
    root_dir = "#{Dir.pwd}/android"
    Dir.chdir("#{fastlane_dir}")
    gradle(
      project_dir: root_dir,
      task: options[:task],
      build_type: "Release",
      properties: {
        "android.injected.signing.store.file" => "#{fastlane_dir}/#{ENV["KEYSTORE_FILE"]}",
        "android.injected.signing.store.password" => ENV["KEYSTORE_PASSWORD"],
        "android.injected.signing.key.alias" => ENV["KEYSTORE_ALIAS"],
        "android.injected.signing.key.password" => ENV["KEYSTORE_ALIAS_PASSWORD"],
      },
    )
  end

  desc "Assemble Android project for APK."
  private_lane :assemble do
    prepare
    build(
      task: "assemble",
    )
  end

  desc "Bundle Android project for AAB."
  private_lane :bundle do
    prepare
    build(
      task: "bundle",
    )
  end

  desc "Ship Android app to Firebase App Distribution."
  lane :firebase do
    clean
    assemble
    firebase_app_distribution(
      app: ENV["FIREBASE_ANDROID_ID"],
      groups: ENV["TEST_GROUP"],
      apk_path: "./build/app/outputs/apk/release/app-release.apk",
      debug: true,
      firebase_cli_token: ENV["FIREBASE_CLI_TOKEN"],
      release_notes: "AdHoc配信のアプリケーション(Android版)になります。",
    )
    teardown
  end

  desc "Ship to Playstore Internal Test track."
  lane :playconsole do
    clean
    bundle
    upload_to_play_store(
      track: "internal",
      release_status: "draft",
      track_promote_to: "internal",
      json_key_data: ENV["PLAYSTORE_JSON_KEY_DATA"],
      aab: "./build/app/outputs/bundle/release/app-release.aab",
      package_name: ENV["APP_IDENTIFIER"],
    )
    teardown
  end
end
